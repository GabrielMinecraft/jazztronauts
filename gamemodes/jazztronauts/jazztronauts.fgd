@include "base.fgd"
@include "halflife2.fgd"

@PointClass base(Targetname) iconsprite("editor/jazz_dialog.vmt") = jazz_dialog : "Runs Dialog"
[
	spawnflags(flags) =
	[
		1  : "SendToAllPlayers"				: 1
	]

	script(string)							: "Script" : "" : "Script to run"
	
	input Start(void)  : "Starts Dialog"

	output OnPlayerFinished(void) : "Fires when a player has finished with the dialog sequence. The player is the activator"
	output OnEveryoneFinished(void) : "Fires when everyone has finished playing this sequence."
	
]

@PointClass base(Targetname, Origin, Angles) studioprop() = jazz_door : "Door to teleport players between locations"
[
	model(studio) : "World Model" : "models/sunabouzu/jazzdoor.mdl"
	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
	modelscale(float) : "Model Scale" : "1.0" : "Scales the model by precentage given. 1 = 100%, 0.5 = 50%, 2 = 200%, etc."
	teleportentity(target_destination) : "Teleport To" : : "The name of the teleport entity." 
	opendoorsound(sound) : "Door Open sound" : : "The sound the door will make when it opens."
	closedoorsound(sound) : "Door Close sound" : : "The sound the door will make when it closes."
	lockdoorsound(sound) : "Door Locked sound" : : "The sound the door will make when it's attempted at while locked."
//	unlockdoorsound(sound) : "Door Unlocked sound" : : "The sound the door will make when it's unlocked."
//	loadingscreen(string) : "Loading Screen" : : "Overrides the random loading screen"
	startlocked(boolean) : "Start Locked" : 0 : "Whether or not this door should start locked"
	useablesizemin(float) : "Minimum Player Scale" : -1 : "Player must be at least this big to use this door (negative for no minimum size)"
	useablesizemax(float) : "Maximum Player Scale" : -1 : "Player must be at least this small to use this door (negative for no maximum size)"
	spawnflags(flags) =
	[
		1 : "Strip Weapons"   : 0
		2 : "Don't Draw"   : 0
	]
	
	output OnTeleport(void) : "Fires on Teleport"
	output OnUnlock(void) : "Fires when the door is unlocked"
	output OnUse(void) : "Fires when an Entity uses this"
	output OnUseLocked(void) : "Fires when an Entity uses this while we're locked"
	
	input Teleport(void) : "Teleport the activator"
	input Unlock(void) : "Unlock the door"
	input Lock(void) : "Lock the door"
	input Skin(integer) : "Changes the model skin to the specified number."
]

@PointClass base(Targetname, Angles) studioprop("models/props_c17/gravestone_coffinpiece001a.mdl") = jazz_door_eclipse : "False door that acts as a waypoint for eclipse cat encounters" []


@PointClass base(Targetname) origin(marker) iconsprite("editor/env_shooter.vmt") = jazz_hub_propvomiter : "Prop Poop Chute"
[
	marker(vector) : "Marker" : : "Where the marker for this vomiter should be (typically above its activator)"
	vomitmusic(sound) : "Vomit Music Loop" : "jazztronauts/music/trash_chute_music_loop.wav" : "Sound file played while vomiting props (expected to loop!)"
	vomitmusicfinish(sound) : "Vomit Music Finish" : "jazztronauts/music/trash_chute_music_stop.wav" : "Sound file played once prop vomiting ends."
	vomitmusicempty(sound) : "Vomit Music Empty" : "jazztronauts/music/trash_chute_music_empty.wav" : "Sound file played if player had no props to turn in."

	output OnVomitEnd(void) : "Fires when props are finished vomiting"
	output OnVomitEndEmpty(void) : "Fires on vomit fail music crescendo."
	output OnVomitStart(void) : "Fires when there has been a successful pull of the lever. "
	output OnVomitStartEmpty(void) : "Fires when there has been a successful pull of the lever, but the player had no props."
	output OnVomitNPC(void) : "Fires when the vomiter releases an actual NPC."

	input Vomit(void)  : "Begin vomiting props"
	input SetSpeed(integer) : "Set props per vomit think (default 2)"
	input SetConstipateOdds(integer) : "1 out of n chance to constipate (0 always constipate)"
]

@PointClass base(Targetname) origin(marker) iconsprite("editor/env_shooter.vmt") = jazz_hub_propvomiter_dummy : "Prop Poop Chute - Ending 1"
[
	marker(vector) : "Marker" : : "Where the marker for this vomiter should be (typically above its activator)"

	output OnVomitEnd(void) : "Fires when props are finished vomiting"
	output OnVomitStart(void) : "Fires when there has been a successful pull of the lever. "
	output OnVomitStartEmpty(void) : "Fires when there has been a successful pull of the lever, but the player had no props."

	input Vomit(void)  : "Begin vomiting props"
	input StopVomit(void)  : "Stop vomiting props"
]

@PointClass base(Targetname, Angles) studioprop() = jazz_hub_browser : "Jazz Addon Browser"
[
	model(studio) : "World Model" : "models/sunabouzu/jazzbigtv.mdl"
	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
	rtmat(integer) : "RT Material Index" : 3 : "Which material index (starting from 0) will act as the model's RT screen?"

	output OnMapRolled(void) : "Fires when a map has been successfully rolled"
	output OnAddonSelected(void) : "Fires when an addon has been selected and we should switch modes"

	input RollAddon(void)  : "Perform a random roll for the next addon"
	input SelectCurrentAddon(void)  : "Select the current addon, switching modes."
	input TurnOn(void) 	   : "Turn on the tv, allowing it to receive input to change the channel"
	input TurnOff(void)    : "Turn off the tv, blocking any channel change inputs."

	input SwitchToHistory1(void)	: "Switch to the first entry in our History"
	input SwitchToHistory2(void)	: "Switch to the second entry in our History"
	input SwitchToHistory3(void)	: "Switch to the third entry in our History"
	input SwitchToHistory4(void)	: "Switch to the fourth entry in our History"
	input SwitchToHistory5(void)	: "Switch to the fifth entry in our History"
	input HistoryUp(void)			: "Shift items in history up one slot"
	input HistoryDown(void)			: "Shift items in history down one slot"

	spawnflags(flags) =
	[
		1 : "Ignore +USE"   : 0
		2 : "Disable Collisions (+USE can't be used without collisions)" : 0
	]
]

@PointClass base(Targetname, Angles) studioprop() = jazz_hub_selector : "Jazz Map Selector"
[
	model(studio) : "World Model" : "models/sunabouzu/jazzportal.mdl"
	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
	rtmat(integer) : "RT Material Index" : 0 : "Which material index (starting from 0) will act as the model's RT screen?"
	facing(choices) : "Facing Axis" : 2 : "Should we rotate to face the player?" = 
	[
		0 : "No rotation"
		1 : "Rotate Pitch"
		2 : "Rotate Yaw"
		3 : "Rotate Roll"
	]
	outro(string) : "Normal Ending Map" : "jazz_outro" : "The name of the map this hub wants to use for its Normal Ending. No '.bsp' extension"
	outro2(string) : "True Ending Map" : "jazz_outro2" : "The name of the map this hub wants to use for its True Ending. No '.bsp' extension"
	trolley(string) : "Trolley Script File" : "default" : "If a custom trolley script is expected to go with this hub map, define it here. Path is typically relative to either the lua folder, or to 'gamemodes/jazztronauts/entities/entities/jazz_bus'" 
	voidrender(boolean) : "Render Void" : 0 : "Enable void rendering. Only enable in hub if you are using the void shell material, or you give the player the Prop Snatcher for some reason."

	output OnMapSelected(void) : "Fires when a map has been selected and is starting the download process."
	output OnMapDownloaded(integer) : "Fires when a map has finished downloading and is ready to be analyzed. 1 means successful, 0 means failure."
	output OnMapAnalyzed(void) : "Fires when a map has finished being analyzed and facts have been extracted."
	output OnMapDeselected(void) : "Fires when a map has been deselected."
	output OnMapFailure(void) : "Fires when a map has failed to load."

	input SelectAddon(void)  		: "Select the currently-browsed addon. Begins downloading and mounting the map"
	input CancelAddon(void)  		: "Turn off the selector, switching off all the fact screens."
	input VoidRenderEnable(void)	: "Enable rendering the Void"
	input VoidRenderDisable(void)	: "Disable rendering the Void"
	input VoidRenderToggle(void)	: "Toggle rendering the Void"
	input VoidRenderSet(bool)		: "Set rendering the Void"

	spawnflags(flags) =
	[
		1 : "Ignore +USE"   : 0
		2 : "Disable Collisions (+USE can't be used without collisions)" : 0
		4 : "Render When Off" : 0
	]
]

@PointClass base(Targetname, Angles) studioprop("models/editor/cat_start.mdl") = jazz_cat : "Jazz Cat"
[
    npcid(choices) : "Cat Character" : "1" =
    [
        1 : "Bartender" 
        2 : "Singer" 
        3 : "Pianist" 
		4 : "Cellist"
    ]
	output OnPicked(void) : "Fires when this spawn is selected."
	output OnNotPicked(void) : "Fires when this spawn is not selected."

	input Skin(integer) : "Changes the model skin to the specified number."
	input SetIdle(string) : "Changes the idle animation to the specified sequence."

	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
	DefaultAnim(string) : "Idle Animation" : : "Overrides the default idle animation"
	multiplier(integer) : "Chance Multiplier" : 1 : "How many chances this spawn has to be picked. Higher values are more likely."
	
	spawnflags(flags) =
	[
		1 : "Disable Head Tracking"   : 0
		2 : "Enable Physics (lul)"    : 0
		4 : "Uses New Angles (Don't Change)"    : 1
	]
]

@PointClass base(Targetname, Angles) studioprop("models/props_combine/combine_interface001.mdl") = jazz_bus_selector : "Custom Workshop ID Loader" []

@PointClass base(Targetname, Angles) iconsprite("editor/jazz_hub_propleaderboard.vmt") = jazz_hub_propleaderboard : "Prop Leaderboard"
[
	leaderboardid(choices) : "Leaderboard Type" : "1" =
    [
        1 : "All Time" 
        2 : "Redeemed Current Map" 
        3 : "Total Unredeemed" 
    ]
]

@PointClass base(Targetname, Angles) studioprop("models/sunabouzu/shard_tank.mdl") = jazz_shardtank : "Jazz Shard Tank"
[

]

@PointClass base(Targetname, Angles) studioprop("models/sunabouzu/jazzblackshard.mdl") = jazz_shard_black : "Black Shard" []

@PointClass base(Targetname) iconsprite("editor/jazz_checkpoint.vmt") = jazz_checkpoint : "Jazz Player Checkpoint"
[
	TeleportRadius(integer) : "Teleport Radius": 0 : "Radius around the origin to randomly pepper in players"

	input MovePlayers(void)  : "Moves players to this entity's origin"
]

@SolidClass base(Targetname) = jazz_trigger_group : "Jazz Group Trigger"
[
	StartDisabled(boolean) : "Start Disabled" : 0 : "Stay dormant until activated (with the Enable input)."
	output OnEveryoneInside(void) : "Fires when everybody is within the trigger."
	output OnEveryoneNotInside(void) : "Fires when no longer everybody is in the trigger"

	output OnInsideEmpty(void) : "Fires when NOBODY is within the trigger."
	output OnInsideNotEmpty(void) : "Fires if we were empty but SOMEBODY entered the trigger."

	output OnPlayerEnter(void) : "Fires when a single player has entered the trigger"
	output OnPlayerLeave(void) : "Fires when a single player has left the trigger"

	input Enable(void) : "Enable this trigger."
	input Disable(void) : "Disable this trigger."
	input Toggle(void) : "Toggles this trigger between enabled and disabled states."
]

@SolidClass base(Targetname) = jazz_trigger_theft : "Jazz Brush Theft Trigger"
[
	output OnInitialBrushStolen(void) : "Fires the first brush within this trigger has been stolen."
	output OnBrushStolen(void) : "Fires every single time a brush has been stolen."
	output OnThresholdHit(void) : "Fires when the threshold of stolen brushes has been hit"

	StealThreshold(integer) : "Steal Threshold": 100 : "Percentage of brushes needed to be stolen for the OnThresholdHit output to fire. (0-100 where 50 is half brushes, 100 is all, etc.)"
]

@PointClass base(Targetname) iconsprite("editor/jazz_concommand.vmt") = jazz_concommand : "Jazz Console Command Executer"
[
	Concommand(string)	: "Console Command" : "" : "Command to run on the server."
	
	input RunCommand(void)  : "Executes the console command on the server."
]

@PointClass base(Targetname) iconsprite("editor/env_shooter.vmt") = jazz_changelevel : "Jazz Level Changer"
[
	level(choices)	: "Switch to" : "" : "Which level to change to (specific name or option)" =
	[
		"<hub>" : "Hub map"
		"<intro>" : "Intro map"
		"<encounter>" : "Encounter map"
		"<outro1>" : "Normal Ending map"
		"<outro2>" : "True Ending map"
	]
	
	input ChangeLevel(void)  : "Changes the current level"
]

@PointClass base(Targetname, Angles) studioprop() = jazz_factscreen : "Jazz Random Fact Screen"
[
	model(studio) : "World Model" : "models/sunabouzu/jazz_tv01.mdl"
	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
	DefaultAnim(string) : "Idle Animation" : : "Overrides the default idle animation"
	rtmat(integer) : "RT Material Index" : 1 : "Which material index (starting from 0) will act as the model's RT screen?"
	modelscale(float) : "Model Scale" : "1.0" : "Scales the model by precentage given. 1 = 100%, 0.5 = 50%, 2 = 200%, etc."
	factname(choices) : "Fact Name" : "" : "What fact(s) this screen will display. Separate multiple choices with commas." = 
	[
		"" : "Random"
		"ws_owner" : "Workshop Owner"
		"ws_views" : "Views on Workshop"
		"ws_filesize" : "File Size"
		"ws_favorites" : "Current Favorites"
		"ws_subscriptions" : "Current Subscriptions"
		"ws_upload_date" : "Workshop Upload Date"
		"ws_update_date" : "Date of Last Update"
		"ws_screenshots" : "Screenshots"
		"ws_tags" : "Workshop Tags"
		"comment" : "Random Comment"
		"map_size" : "Map Dimensions"
		"skybox" : "Skybox Name"
		"map_comment" : "Map Metadata Comment"
		"brush_count" : "World Brush Count"
		"static_props" : "prop_static Count"
		"entity_count" : "Entity Count"
		"map_name" : "Map Name"
		"comment0" : "Comment [Slot 1]"
		"comment1" : "Comment [Slot 2]"
		"comment2" : "Comment [Slot 3]"
		"comment3" : "Comment [Slot 4]"
		"comment4" : "Comment [Slot 5]"
		"comment5" : "Comment [Slot 6]"
		"comment6" : "Comment [Slot 7]"
		"comment7" : "Comment [Slot 8]"
		"comment8" : "Comment [Slot 9]"
		"comment9" : "Comment [Slot 10]"
		"-comment" : "Random, non-comment"
		"map_size,skybox,map_comment,brush_count,static_props,entity_count,map_name" : "Random, BSP only"
		"comment,ws_owner,ws_views,ws_filesize,ws_favorites,ws_subscriptions,ws_upload_date,ws_update_date,ws_screenshots,ws_tags" : "Random, workshop only"
		"ws_owner,ws_views,ws_filesize,ws_favorites,ws_subscriptions,ws_upload_date,ws_update_date,ws_screenshots,ws_tags" : "Random, workshop only (no comments)"
	]
	disableshadows(boolean) : "Disable Shadows" : 0

	input Skin(integer) : "Changes the model skin to the specified number."
	input SetIdle(string) : "Changes the idle animation to the specified sequence."
	input SetModelScale(float) : "Changes the model's scale."

	output OnFactDisplayed(void) : "Fires when this monitor displays its fact."
	output OnFactRemoved(void) : "Fires when this monitor stops displaying its fact."

	spawnflags(flags) =
	[
		1 : "Invisible When Off" : 0
	]
]

@PointClass base(Targetname) iconsprite("editor/env_shooter.vmt") = jazz_vote_podiums : "Jazz Vote Podium Circle"
[
	ApproachRadius(integer) : "Approach Radius": 500 : "The radius at which the podiums spawn from the ground when a player approaches."
	PodiumRadius(integer) : "Podium Spawn Radius" : 50 : "How close to the center the podiums spawn in a circle."

	input Reset(void)  : "Reset to our initial, hidden state, removing podiums."

	output OnActivated(void) : "Fires when all players have voted and the podiums sink into the ground"
	output OnApproached(void) : "Fires when a player enters the activation range, showing our podiums"
]

@PointClass base(Targetname) iconsprite("editor/jazz_global.vmt") = jazz_global : "An entity to control a global game state of jazztronauts."
[
	globalstate(choices) : "Global State to Set" : : "The state to set on or off." =
	[
		"finished_intro" : "Fresh restart, whether or not they've finished the intro" 
		"ended" : "Ending has been seen and the game is ready to be restarted for NG+" 
		"unlocked_encounter" : "If enabled, allows safe travel to the eclipse cat horror apartment. Kicks out otherwise." 
		"encounter_1" : "Mark that we have done the first encounter with the cat"
		"encounter_2" : "Mark that we have done the second encounter with the cat"
		"encounter_3" : "Mark that we have done the third encounter with the cat"
	]

	// Inputs
	input TurnOn(void) : "Set state of global to ON."
	input TurnOff(void) : "Set state of global to OFF."
]

@PointClass iconsprite("editor/logic_auto.vmt") = jazz_encounter_auto : "Fires outputs when a map spawns, depending on the current state of the encounter cat."
[
	// Outputs
	// output OnMapSpawn(integer) : "Fired when map spawns, with the value being which cat encounter to show. 1 is first, 2 is second, 3 is third, 0 is none." //legacy
	output OnNoEncounter(void) : "Fired when map spawns and there is no cat encounter to show."
	output OnEncounter1(void) : "Fired when map spawns and there is the first cat encounter to show."
	output OnEncounter2(void) : "Fired when map spawns and there is the second cat encounter to show."
	output OnEncounter3(void) : "Fired when map spawns and there is the third cat encounter to show."
]

@PointClass base(Targetname, Angles) studioprop() = mediaplayer_tv : "Plays media"
[
	output OnMediaStarted(void) : "Fired when media playback begins"
	output OnQueueEmpty(void) : "Fired when all queued media finishes playing"

	input AddPlayer(void) : "Adds the activator to the list of media listeners"
	input RemovePlayer(void) : "Removes the activator from the list of media listeners"
	input RemoveAllPlayers(void) : "Removes all players from the list of media listeners"
	input PlayPauseMedia(void) : "Toggles the play or pause state of the current media"
	input ClearMedia(void) : "Clears all queued and active media"
]

@PointClass base(Targetname, Angles) studioprop() = jazz_waterprop : "Detail props that gently bob in the water"
[
	model(studio) : "World Model" : "models/sunabouzu/jazzlily01.mdl"
	//bodygroup(string) : "Bodygroup" : "0" : "Sets the model's bodygroups. Uses the GMod method, so each character in the string represents a separate bodygroup. (0 to 9, a to z being 10 to 35)" //not implemented
	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
]

@PointClass base(Targetname, Angles) studioprop("models/editor/camera.mdl") = jazz_sceneviewoverride : "Manual camera placement for jazz scenes"
[
	script(string) : "Script" : "" : "The script that this entity works on"
	branch(string) : "Branch" : "" : "The part of the script that this entity is overriding"
	branchnumber(integer) : "Location" : 1 : "If branch has multiple camera calls, defines which one this entity is overriding, if any. 0 to insert at start, -1 for end, otherwise replace nth view"
	fov(integer) : "FOV" :  : "The FOV of this view. Leave blank to use existing FOV"
	istween(boolean) : "Tween" : 0 : "Is this view a tween end location?"
	tweentime(float) : "Tween Time" : "0" : "Time to spend tweening"
]

@PointClass base(Targetname, Angles) iconsprite("editor/jazz_scenelocale.vmt") = jazz_scenelocale : "Landmark for Jazztronauts scenes"
[
	zsnap1(float) : "Default Zsnap" : "64" : "Default Layer's Zsnap. Zsnap is a +/-range around a layer in which a scene object will attempt to find the floor when its gravity is enabled."
	layer2(float) : "Upper Layer" : "0" : "Standardized upper layer, i.e. average height from the floor to the top of the bar's overhang"
	zsnap2(float) : "Upper Zsnap" : "64" : "Zsnap for standardized upper layer"
	layer3(float) : "Lower Layer" : "0" : "Standardized lower layer"
	zsnap3(float) : "Lower Zsnap" : "64" : "Zsnap for standardized lower layer"
]

@PointClass base(Targetname) iconsprite("editor/jazz_pvs_occupation.vmt") = jazz_pvs_occupation : "Keep track of an area's PVS state"
[
	initialstate(choices) : "Initial State" : 0 : "The state this entity is expected to be in when the first player spawns into the level. Occupied prevents initial OnOccupied output from firing on first player spawn." =
	[
		0 : "Unoccupied"
		1 : "Occupied"
	]
	
	output OnOccupied(void) : "Fired when the first player's view is first detected in this entity's PVS."
	output OnUnoccupied(void) : "Fired when the last player's view is no longer detected in this entity's PVS."

	input ForceOccupancy(float) : "Force this entity to consider that its PVS holds a player's view. Will trigger OnOccupied if no actual player was already viewing. Optional timer to auto unforce."
	input ReleaseForcedOccupancy(void) : "Revert back to normal detection behavior. Will trigger OnUnoccupied if no actual players are viewing."
]

@PointClass base(Targetname, Angles) studioprop("models/matt/jazz_trolley.mdl") = info_busstop : "Marker for summoned trolley to travel to"
[
	traveltime(float) : "Exit Time" : "2.5" : "How long the trolley takes to travel to the end of its path."
	leadup(integer) : "Entrance Distance" : 2000 : "How far the trolley travels after spawning to reach its idle position. Can be negative to go backwards!"
	traveldist(integer) : "Exit Distance" : 4500 : "How far the trolley travels when exiting the hub. Can be negative to go backwards!"
	chance(integer) : "Chance Multiplier" : 1 : "How many chances this bus stop has to be picked. Higher values are more likely. Should be left at 1 if you only have one stop in your map."

	spawnflags(flags) =
	[
		1 : "Use True Position (Don't Change)" : 1
	]
]

@PointClass base(Targetname, Angles, Parentname) studioprop("models/matt/jazz_trolley.mdl") = jazz_bus_model : "Dummy model for putting text on the bus"
[
	destination(string) : "Destination Text" : "jazz.bus.bar" : "Text displayed for the destination sign. Can be a localization token."
]

@PointClass base(Targetname) origin(marker) iconsprite("editor/jazz_logic_purchase.vmt") = jazz_logic_purchase : "Arbitrary money spending"
[
	price(integer) : "Price" : 1 : "The base price of this purchase."
	needfullvalue(boolean) : "Require Full Value" : 1 : "The player must have the full purchase amount to make this purchase (and be charged)."
	usemultiplier(boolean) : "Use Multiplier" : 0 : "Scale the price with the NG+ Multiplier."
	
	output OnPurchaseAttempt(void) : "Fired when the player has attempted to make a purchase."
	output OnPurchased(integer) : "Fired when the player is successfully charged."
	output OnInsufficientFunds(void) : "Fired when the player does not have enough money for the purchase."
	output OnPartialFunds(integer) : "When partial charging is enabled, fired when the player has some money but not enough for the full amount."
	
	input AttemptPurchase(void) : "Attempt to make a purchase for the activating player."
]

@PointClass base(Weapon) studioprop("models/weapons/w_stunbaton.mdl") = weapon_propsnatcher : "Prop Snatcher" []
@PointClass base(Weapon) studioprop("models/weapons/w_bus_summoner.mdl") = weapon_buscaller : "Portable Bus Stop" []
@PointClass base(Weapon) studioprop("models/weapons/w_run.mdl") = weapon_run : "Run" []
@PointClass base(Weapon) studioprop("models/Gibs/HGIBS.mdl") = weapon_stan : "Stan" []
@PointClass base(Weapon) studioprop("models/weapons/w_hackergoggles.mdl") = weapon_hacker : "Hacker Goggles" []
@PointClass base(Weapon) studioprop("models/weapons/w_pistol.mdl") = weapon_rats : "Personal Shrink Ray" []